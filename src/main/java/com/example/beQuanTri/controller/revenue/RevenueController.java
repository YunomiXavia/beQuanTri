package com.example.beQuanTri.controller.revenue;

import com.example.beQuanTri.dto.response.ApiResponse;
import com.example.beQuanTri.dto.response.PaginatedResponse;
import com.example.beQuanTri.dto.response.order.OrderItemsResponse;
import com.example.beQuanTri.entity.revenue.DailyRevenue;
import com.example.beQuanTri.service.revenue.RevenueService;
import lombok.AccessLevel;
import lombok.Builder;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;

/**
 * Controller to handle revenue-related operations.
 * Provides endpoints to fetch revenue data for specific date ranges
 * and calculate revenues or commissions for collaborators.
 */
@Builder
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@RestController
@RequestMapping("/revenue")
@RequiredArgsConstructor
public class RevenueController {

    @Autowired
    RevenueService revenueService;

    /**
     * Retrieves the daily revenue between two specified dates with pagination.
     *
     * @param startDate the start date of the range in the format "yyyy-MM-dd"
     * @param endDate   the end date of the range in the format "yyyy-MM-dd"
     * @param page      the page number (default is 0)
     * @param size      the page size (default is 10)
     * @return ApiResponse containing a paginated list of DailyRevenue objects
     */
    @GetMapping("/between-dates")
    ApiResponse<PaginatedResponse<Page<DailyRevenue>>> getDailyRevenueBetweenDates(
            @RequestParam String startDate,
            @RequestParam String endDate,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size) {

        // Parse the input dates
        LocalDate start = LocalDate.parse(startDate);
        LocalDate end = LocalDate.parse(endDate);

        // Tạo đối tượng Pageable
        Pageable pageable = PageRequest.of(page, size);

        // Fetch the revenue data with pagination
        Page<DailyRevenue> dailyRevenuePage = revenueService.fetchDailyRevenueBetweenDates(start, end, pageable);

        // Tạo PaginatedResponse
        PaginatedResponse<Page<DailyRevenue>> paginatedResponse = PaginatedResponse.<Page<DailyRevenue>>builder()
                .message("Daily revenue fetched successfully with pagination!")
                .data(dailyRevenuePage)
                .currentPage(dailyRevenuePage.getNumber())
                .totalPages(dailyRevenuePage.getTotalPages())
                .totalElements(dailyRevenuePage.getTotalElements())
                .last(dailyRevenuePage.isLast())
                .build();

        return ApiResponse.<PaginatedResponse<Page<DailyRevenue>>>builder()
                .message("Daily revenue fetched successfully with pagination!")
                .result(paginatedResponse)
                .build();
    }

    /**
     * Retrieves the total revenue generated by a collaborator.
     *
     * @param collaboratorId the ID of the collaborator
     * @return ApiResponse containing the total revenue as a double
     */
    @GetMapping("/{collaboratorId}")
    ApiResponse<Double> getCollaboratorTotalRevenue(
            @PathVariable("collaboratorId") String collaboratorId) {

        double totalRevenue = revenueService
                .fetchCollaboratorTotalRevenue(collaboratorId);

        return ApiResponse.<Double>builder()
                .message("Total Revenue fetched successfully! Total: " + totalRevenue)
                .result(totalRevenue)
                .build();
    }

    /**
     * Retrieves the total commission earned by a collaborator.
     *
     * @param collaboratorId the ID of the collaborator
     * @return ApiResponse containing the total commission as a double
     */
    @GetMapping("/commission/{collaboratorId}")
    ApiResponse<Double> getCollaboratorTotalCommission(
            @PathVariable("collaboratorId") String collaboratorId) {

        double totalCommission = revenueService
                .fetchCollaboratorTotalCommission(collaboratorId);

        return ApiResponse.<Double>builder()
                .message("Total Commission fetched successfully! Commission: " + totalCommission)
                .result(totalCommission)
                .build();
    }

    /**
     * Retrieves the total revenue including commission earned by a collaborator.
     *
     * @param collaboratorId the ID of the collaborator
     * @return ApiResponse containing the total revenue including commission as a double
     */
    @GetMapping("/with-commission/{collaboratorId}")
    ApiResponse<Double> getCollaboratorTotalRevenueIncludingCommission(
            @PathVariable("collaboratorId") String collaboratorId) {

        double totalRevenueIncludingCommission = revenueService
                .fetchCollaboratorTotalRevenueIncludingCommission(collaboratorId);

        return ApiResponse.<Double>builder()
                .message("Total Revenue Including Commission fetched successfully! Total: "
                        + totalRevenueIncludingCommission)
                .result(totalRevenueIncludingCommission)
                .build();
    }

    /**
     * Retrieves the service dates in an order with pagination.
     *
     * @param orderId the ID of the order
     * @param page    the page number (default is 0)
     * @param size    the page size (default is 10)
     * @return ApiResponse containing a paginated list of OrderItemsResponse
     */
    @GetMapping("/service-dates/{orderId}")
    ApiResponse<PaginatedResponse<Page<OrderItemsResponse>>> getServiceDates(
            @PathVariable("orderId") String orderId,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size) {

        Pageable pageable = PageRequest.of(page, size);

        Page<OrderItemsResponse> serviceDatesPage = revenueService.getServiceDatesByOrderId(orderId, pageable);

        PaginatedResponse<Page<OrderItemsResponse>> paginatedResponse = PaginatedResponse.<Page<OrderItemsResponse>>builder()
                .message("Service dates fetched successfully with pagination!")
                .data(serviceDatesPage)
                .currentPage(serviceDatesPage.getNumber())
                .totalPages(serviceDatesPage.getTotalPages())
                .totalElements(serviceDatesPage.getTotalElements())
                .last(serviceDatesPage.isLast())
                .build();

        return ApiResponse.<PaginatedResponse<Page<OrderItemsResponse>>>builder()
                .message("Service dates fetched successfully with pagination!")
                .result(paginatedResponse)
                .build();
    }
}